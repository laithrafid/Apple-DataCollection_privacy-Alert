id: cissharing_ssh_disable
title: "Disable Remote Login"
discussion: |
  [discrete]
  ==== Description:
  Remote Login allows an interactive terminal connection to a computer.
  
  [discrete]
  ==== Rationale:
  Disabling Remote Login mitigates the risk of an unauthorized person gaining access to the system via Secure Shell (SSH). While SSH is an industry standard to connect to posix servers, the scope of the benchmark is for Apple macOS clients, not servers.
  
  macOS does have an IP based firewall available (pf, ipfw has been deprecated) that is not enabled or configured. There are more details and links in section 7.5. macOS no longer has TCP Wrappers support built-in and does not have strong Brute-Force password guessing mitigations, or frequent patching of openssh by Apple. Most macOS computers are mobile workstations, managing IP based firewall rules on mobile devices can be very resource intensive. All of these factors can be parts of running a hardened SSH server.

  [IMPORTANT]
  ====
  The SSH server built-in to macOS should not be enabled on a standard user computer, particularly one that changes locations and IP addresses. A standard user that runs local applications including email, web browser and productivity tools should not use the same device as a server. There are Enterprise management tool-sets that do utilize SSH, if they are in use, the computer should be locked down to only respond to known trusted IP addresses and appropriate admin service accounts.

  For macOS computers that are being used for specialized functions there are several options to harden the SSH server to protect against unauthorized access including brute force attacks. There are some basic criteria that need to be considered:
  
  • Do not open an SSH server to the internet without controls in place to mitigate SSH brute force attacks, this is particularly important for systems bound to Directory environments. It is great to have controls in place to protect the system but if they trigger after the user is already locked out of their account they are not optimal. If authorization happens after authentication directory accounts for users that don't even use the system can be locked out.
  
  • Do not use SSH key pairs when there is no insight to the security on the client system that will authenticate into the server with a private key. If an attacker gets access to the remote system and can find the key they may not need a password or a key logger to access the SSH server.
  
  • Detailed instructions on hardening an SSH server, if needed, are available in the CIS Linux Benchmarks but it is beyond the scope of this benchmark
  ====

  [discrete]
  ==== Audit:
check: |
  /bin/launchctl print-disabled system | /usr/bin/grep -c '"com.openssh.sshd" => true'
result:
  integer: 1
fix: |
  [source,bash]
  ----
  /bin/launchctl disable system/com.openssh.sshd
  ----
references:
  cce:
    - CCE-85447-1
  800-53r4:
    - AC-3 
    - CM-7
    - IA-2(8)
    - IA-2(9)
  srg: 
    - SRG-OS-000250-GPOS-00093
    - SRG-OS-000033-GPOS-00014
    - SRG-OS-000393-GPOS-00173
    - SRG-OS-000394-GPOS-00174
    - SRG-OS-000112-GPOS-00057
    - SRG-OS-000113-GPOS-00058
    - SRG-OS-000423-GPOS-00187
    - SRG-OS-000424-GPOS-00188
    - SRG-OS-000425-GPOS-00189
    - SRG-OS-000426-GPOS-00190
  disa_stig: 
    - APPL-11-000011
  800-171r2:
    - 3.1.1
    - 3.1.2
    - 3.4.6
    - 3.5.4
  custom:
    CIS:
    - 2.4.5 Disable Remote Login (Automated)
    - Level 1
macOS:
  - "11.0"
tags:
  - CIS-Benchmark
  - CIS-Benchmark-L1
severity: "medium"
mobileconfig: false
mobileconfig_info: